@page "/orders"

@inject IOrderRepository OrderRepository
@inject UserManager<AppUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Identity
@using Plugins.DataStore.MySQL
@using UseCases.DataStorePluginInterfaces
@using CoreBuisness.User;

<h1>Orders</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Order Number</th>
                <th>Products</th>
                <th>Total Price</th>
                <th>Worker Name</th>
                <th>Worker Phone Number</th>
                <th>Status</th>
                <th>Actions</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.OrderedProductNames</td>
                    <td>@order.TotalPrice $</td>
                    <td>@order.WorkerName</td>
                    <td>@order.WorkerPhoneNumber</td>
                    <td>@order.Status</td>
                    <td>
                        @if (order.Status == OrderStatusEnum.Pending)
                        {
                            <button class="btn btn-danger" @onclick="(() => CancelOrder(order.Id))">Cancel</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Order> orders;
    string errorMessage = null;

    //protected override async Task OnInitializedAsync()
    //{
    //    var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    //    var user = authState.User;
    //    var loggedUser = await UserManager.GetUserAsync(user);
    //    orders = await OrderRepository.GetOrdersByCustomerIdAsync(loggedUser.Id);
    //}

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var loggedUser = await UserManager.GetUserAsync(user);

            if (loggedUser != null)
            {
                orders = await OrderRepository.GetOrdersByCustomerIdAsync(loggedUser.Id);
            }
            else
            {
                errorMessage = "Please Register!";
            }
        }
        else
        {
            errorMessage = "Please Register!";
        }
    }

    private async Task CancelOrder(int orderNumber)
    {
        var order = await OrderRepository.GetOrderAsync(orderNumber);
        if (order != null && order.Status == OrderStatusEnum.Pending)
        {
            OrderRepository.DeleteOrder(orderNumber);
            orders.Remove(order);
        }
    }
}
