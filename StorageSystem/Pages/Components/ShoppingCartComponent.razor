@page "/cart"

@inject IViewProductsUseCase ViewProductsUseCase
@inject IAddProductToCartUseCase AddProductToCartUseCase
@inject IGetCartUseCase GetCartUseCase
@inject IGetCartProductsUseCase GetCartProductsUseCase
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject DataContext dbContext
@using Plugins.DataStore.MySQL
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms

@if (products != null)
{
            
            <table class="table table-striped table-hover ">
                <thead>
                    <tr>
                        <th>
                            Item Name
                        </th>
                        <th>
                            Image
                        </th>
                        <th>
                            Price (each)
                        </th>
                        <th>
                            Quantity
                        </th>
                        <th></th>
                    </tr>
                </thead>
                @foreach (var product in products)
                {
                    <tr>
                        <td>
                            @product.Key.Name
                        </td>
                        <td>
                            <img src="@product.Key.ImageLink" alt="" style="width:76px;height:76px;">
                        </td>
                        <td>
                            @product.Key.Price $
                        </td>
                        <td>
                            <input type="number" min="1" @bind="@quantityMap[product.Key]" @oninput="async (e) => await UpdateQuantity(product.Key, quantityMap[product.Key])" />
                        </td>
                        <td>
                            <button type="button" class="btn btn-link" @onclick="() => RemoveProductFromCart(product.Key)">Remove From Cart</button>
                        </td>
                    </tr>

                        total = (double)product.Key.Price * quantityMap[product.Key];
                }
                
            </table>
                <div>
                    Total: @total $
                    
                </div>
                <button type="submit" @onclick="ContinueOrder" class="btn btn-primary">Continue</button>




            
}
else
{
    <div>Your cart is empty!</div>
}

@code {
    private double? total = 0;
    private ShoppingCart cart;
    private List<KeyValuePair<Product, int>> products;
    private Dictionary<Product, int> quantityMap = new Dictionary<Product, int>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCartData();
    }

    private async Task LoadCartData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var isLoggedIn = user.Identity.IsAuthenticated;

        if (isLoggedIn)
        {
            cart = GetCartUseCase.Execute(UserManager.GetUserId(user));
            var cartProducts = GetCartProductsUseCase.Execute();
            cartProducts = cartProducts.Where(cp => cp.ShoppingCartId == cart.Id).ToList();
            products = ViewProductsUseCase.ConvertCartProductsToProducts(cartProducts);
            foreach (var product in products)
            {
                quantityMap[product.Key] = product.Value;
            }
        }
        else
        {
            products = null;
        }
    }

    private async Task RemoveProductFromCart(Product product)
    {
        AddProductToCartUseCase.RemoveProductFromCart(cart, product);
        await LoadCartData();
    }

    private async Task UpdateQuantity(Product product, int quantity)
    {
        var cartProduct = cart.CartProducts.Find(cp => cp.ProductId.Equals(product.ProductId));
        if (cartProduct != null)
        {
            cartProduct.Quantity = quantity;
            await AddProductToCartUseCase.UpdateProductQuantity(cart, cartProduct);
            await LoadCartData();
        }
    }

    private async Task CreateAndSaveOrderAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var loggedInUser = await UserManager.GetUserAsync(user);
            var userEmail = loggedInUser.Email;

            var ongoingOrders = dbContext.Orders.Where(o => o.CustomerId == loggedInUser.Id && o.ShoppingCartId == cart.Id).ToList();
            if (ongoingOrders.Any())
            {
                return;
            }
            var newOrder = new Orders
                {
                    CustomerId = loggedInUser.Id,
                    CustomerEmail = userEmail,
                    Address= "",
                    CustomerName = "",
                    CustomerPhoneNumber = "",
                    WorkerName = "",
                    WorkerPhoneNumber = "",
                    ShoppingCartId = cart.Id

                    // Set other properties as needed
                };


            // Set order items based on the current cart items
            foreach (var product in products)
            {
                var orderItem = new Product
                    {
                        ProductId = product.Key.ProductId,
                        Quantity = product.Value,
                        
                        // Set other properties as needed
                    };    
                
            }

            // Add the new order to the Orders DbSet
            dbContext.Orders.Add(newOrder);

            // Save changes to the database
            await dbContext.SaveChangesAsync();
        }
    }

    private async Task ContinueOrder()
    {
        await CreateAndSaveOrderAsync();
        NavigationManager.NavigateTo("/order-confirmation");
    }


}

