@page "/cart"

@inject IViewProductsUseCase ViewProductsUseCase
@inject IAddProductToCartUseCase AddProductToCartUseCase
@inject IGetCartUseCase GetCartUseCase
@inject IGetCartProductsUseCase GetCartProductsUseCase
@inject UserManager<AppUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject DataContext dbContext
@inject ClientInfo clientInfo
@using CoreBuisness.User;
@using Plugins.DataStore.MySQL
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore;

@if (cart != null && !cart.IsEmpty())
{
            
            <table class="table table-striped table-hover ">
                <thead>
                    <tr>
                        <th>
                            Item Name
                        </th>
                        <th>
                            Image
                        </th>
                        <th>
                            Price (each)
                        </th>
                        <th>
                            Quantity
                        </th>
                        <th></th>
                    </tr>
                </thead>
                @foreach (var shoppingCartProducts in cart.ShoppingCartProducts)
                {
                    <tr>
                        <td>
                            @shoppingCartProducts.Product.Name
                        </td>
                        <td>
                            <img src="@shoppingCartProducts.Product.ImageLink" alt="" style="width:76px;height:76px;">
                        </td>
                        <td>
                            @shoppingCartProducts.Product.Price $
                        </td>
                        <td>
                            @*<input type="number" min="1" @bind="@shoppingCartProducts.Quantity" @oninput="async (e) => await UpdateQuantity(shoppingCartProducts)" />*@
                    <input type="number" min="1" @bind="@shoppingCartProducts.Quantity" @oninput="(e) => OnQuantityChanged(e, shoppingCartProducts)" />

                        </td>
                        <td>
                            <button type="button" class="btn btn-link" @onclick="() => RemoveProductFromCart(shoppingCartProducts.Product)">Remove From Cart</button>
                        </td>
                    </tr>
                }
                
            </table>
                <div>
                    Total: @total $
                     
                </div>  
                <button type="submit" @onclick="ContinueOrder" class="btn btn-primary">Continue</button>
              
}
else
{
    <div>Your cart is empty!</div>
}

@code {
    private double? total = 0;
    private ShoppingCart cart;
    private double? discount = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadCartData();
    }

    private async Task LoadCartData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var isLoggedIn = user?.Identity?.IsAuthenticated ?? false;

        if (isLoggedIn)
        {
            cart = GetCartUseCase.Execute(UserManager.GetUserId(user));
            CalculateTotal();
        }
        else
        {
            cart = GetCartUseCase.Execute(null, clientInfo.ClientId.ToString());
            CalculateTotal();
        }
    }

    private async Task RemoveProductFromCart(Product product)
    {
        AddProductToCartUseCase.RemoveProductFromCart(cart, product);
        await LoadCartData();
    }

    private async Task UpdateQuantity(ShoppingCartProduct shoppingCartProduct)
    {
        await AddProductToCartUseCase.UpdateProductQuantity(shoppingCartProduct);
        await LoadCartData();
        CalculateTotal();
    }

    private async Task<int> CreateAndSaveOrderAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var loggedInUser = await UserManager.GetUserAsync(user);
            var userEmail = loggedInUser.Email;

            var ongoingOrders = dbContext.Orders
            .Where(o => o.ShoppingCartId == cart.Id && o.Status == OrderStatusEnum.Pending)
            .OrderByDescending(o => o.CreatedDate)
            .FirstOrDefault();

            if (ongoingOrders != null)
            {
                return ongoingOrders.Id;
            }
            var newOrder = new Order
                {
                    //CustomerId = loggedInUser.Id,
                    CustomerEmail = userEmail,
                    Address= "",
                    CustomerName = "",
                    CustomerPhoneNumber = "",
                    WorkerName = "",
                    WorkerPhoneNumber = "",
                    ShoppingCartId = cart.Id,
                    Qty = cart.ShoppingCartProducts.Sum(e => e.Quantity),
                    TotalPrice = cart.ShoppingCartProducts.Sum(scp => scp.Product.Price * scp.Quantity),
                    OrderedProductNames = string.Join(", ", cart.ShoppingCartProducts.Select(p => $"{p.Product.Name} x {p.Quantity}")),
                    // Set other properties as needed
                };

            // Add the new order to the Orders DbSet
            dbContext.Orders.Add(newOrder);

            // Save changes to the database
            await dbContext.SaveChangesAsync();
            return newOrder.Id;
        }
        else
        {
            var ongoingOrders = dbContext.Orders
            .Where(o => o.ShoppingCartId == cart.Id && o.Status == OrderStatusEnum.Pending)
            .OrderByDescending(o => o.CreatedDate)
            .FirstOrDefault();

            if (ongoingOrders != null)
            {
                return ongoingOrders.Id;
            }
            var newOrder = new Order
                {
                    //CustomerId = loggedInUser.Id,
                    CustomerEmail = "",
                    Address = "",
                    CustomerName = "",
                    CustomerPhoneNumber = "",
                    WorkerName = "",
                    WorkerPhoneNumber = "",
                    ShoppingCartId = cart.Id,
                    Qty = cart.ShoppingCartProducts.Sum(e => e.Quantity),
                    TotalPrice = cart.ShoppingCartProducts.Sum(scp => scp.Product.Price * scp.Quantity),
                    OrderedProductNames = string.Join(", ", cart.ShoppingCartProducts.Select(p => $"{p.Product.Name} x {p.Quantity}")),
                    // Set other properties as needed
                };

            // Add the new order to the Orders DbSet
            dbContext.Orders.Add(newOrder);

            // Save changes to the database
            await dbContext.SaveChangesAsync();
            return newOrder.Id;
        }
        return 0;
    }
    private async Task<bool> CanCreateNewOrder()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var loggedInUser = await UserManager.GetUserAsync(user);

            var latestOrder = dbContext.Orders
                .Where(o => o.CustomerId == loggedInUser.Id)
                .OrderByDescending(o => o.CreatedDate)
                .FirstOrDefault();

            if (latestOrder == null || latestOrder.Status == OrderStatusEnum.Confirmed || latestOrder.Status == OrderStatusEnum.Declined)
            {
                return true;
            }
        }
        return false;
    }

    private void CalculateTotal()
    {
        total = 0;
        var quantitySzam = 0;

        try
        {
            @foreach (var shoppingCartProducts in cart.ShoppingCartProducts)
            {
                total += shoppingCartProducts.Product.Price * shoppingCartProducts.Quantity;
                quantitySzam += shoppingCartProducts.Quantity;
            }
        }
        catch {}

        if(quantitySzam >= 100)
        {
            discount = 0.9;
        }
        else if ( quantitySzam >= 250)
        {
            discount = 0.87;
        }
        else if(quantitySzam >= 500)
        {
            discount = 0.85;
        }

        total= total * discount;

    } 

    private async Task ContinueOrder()
    {
        int orderNumber = await CreateAndSaveOrderAsync();
        if (orderNumber > 0)
        {
            NavigationManager.NavigateTo($"/order-confirmation/{orderNumber}");
        }
        else
        {
            Console.WriteLine("Failed to create order.");
        }
    }

    private async Task OnQuantityChanged(ChangeEventArgs e, ShoppingCartProduct shoppingCartProduct)
    {
        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
            shoppingCartProduct.Quantity = Convert.ToInt32(e.Value);
            await UpdateQuantity(shoppingCartProduct);
        }
        else
        {
            shoppingCartProduct.Quantity = 1;
            await UpdateQuantity(shoppingCartProduct);
        }
    }

}

