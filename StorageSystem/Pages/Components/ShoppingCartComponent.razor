@page "/cart"

@inject IViewProductsUseCase ViewProductsUseCase
@inject IAddProductToCartUseCase AddProductToCartUseCase
@inject IGetCartUseCase GetCartUseCase
@inject IGetCartProductsUseCase GetCartProductsUseCase
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Identity

@if (products != null)
{
    <div class="panel panel-info">
        <div class="panel-heading">
            <h3 class="panel-title">Order Summary</h3>
        </div>
        <div class="panel-body">
            <div id="update-message">
            </div>
            <table class="table table-striped table-hover ">
                <thead>
                    <tr>
                        <th>
                            Item Name
                        </th>
                        <th>
                            Image
                        </th>
                        <th>
                            Price (each)
                        </th>
                        <th>
                            Quantity
                        </th>
                        <th></th>
                    </tr>
                </thead>
                @foreach (var product in products)
                {
                    <tr>
                        <td>
                            @product.Key.Name
                        </td>
                        <td>
                            <img src="@product.Key.ImageLink" alt="" style="width:76px;height:76px;">
                        </td>
                        <td>
                            @product.Key.Price $
                        </td>
                        <td>
                            <input type="number" @bind="@product.Key.Quantity" @oninput="() => UpdateQuantity(product.Key, product.Value)" min="1" />
                        </td>
                        <td>
                            <a @onclick="() => RemoveProductFromCart(product.Key)" style="cursor:pointer">Remove From Cart</a>
                        </td>
                    </tr>
                    total = total + product.Key.Price * product.Value;
                    
                }
                <tr class="info">
                    <td></td>
                    <td></td>
                    <td></td>
                    <td id="cart-total">
                        Total :  @total $
                    </td>
                </tr>
            </table>
        </div>
    </div>
}
else
{
    <div>Your cart is empty!</div>
}

@code {
    private double? total = 0;
    private ShoppingCart cart;
    private List<KeyValuePair<Product, int>> products;

    protected override async Task OnInitializedAsync()
    {
        await LoadCartData();
    }

    private async Task LoadCartData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var isLoggedIn = user.Identity.IsAuthenticated;

        if (isLoggedIn)
        {
            cart = GetCartUseCase.Execute(UserManager.GetUserId(user));
            var cartProducts = GetCartProductsUseCase.Execute();
            cartProducts = cartProducts.Where(cp => cp.ShoppingCartId == cart.Id).ToList();
            products = ViewProductsUseCase.ConvertCartProductsToProducts(cartProducts);
        }
        else
        {
            products = null;
        }
    }

    private async Task RemoveProductFromCart(Product product)
    {
        AddProductToCartUseCase.RemoveProductFromCart(cart, product);
        await LoadCartData();
    }

    private async Task UpdateQuantity(Product product, int newQuantity)
    {
        AddProductToCartUseCase.UpdateProductQuantity(cart, product, newQuantity);
        await LoadCartData();
        StateHasChanged();
    }
}

