@page "/order-confirmation/{OrderNumber}"

@inject IOrderRepository OrderRepository
@inject NavigationManager NavigationManager
@inject IDeleteOrderUseCase DeleteOrderUseCase
@inject EmailService EmailService
@using UseCases.DataStorePluginInterfaces
@using StorageSystem.Services



<EditForm Model="order" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <lable for="name">Name</lable>
        <InputText id="name" @bind-Value="order.CustomerName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="phonenumber">PhoneNumber</label>
        <InputText id="phonenumber" @bind-Value="order.CustomerPhoneNumber" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="address">Address</label>
        <InputText id="address" @bind-Value="order.Address" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="deliveryday">Delivery Day</label>
        <InputDate id="deliveryday" @bind-Value="order.DeliveryDay" class="form-control"></InputDate>
    </div>
    <div class="form-group">
        <label for="pickupday">Pickup Day</label>
        <InputDate id="pickupday" @bind-Value="order.PickupDay" class="form-control"></InputDate>
    </div>
    <div class="form-group">
        <label for="dayofrenting">Days of renting</label>
        <InputNumber id="dayofrenting" @bind-Value="order.DaysOfRenting" class="form-control"></InputNumber>
    </div>
    <div class="form-group">
        <label for="taxnumber">Tax Number</label>
        <InputNumber id="taxnumber" @bind-Value="order.TaxNumber" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Confirm Order</button>
    
</EditForm>
<br />
<button type="button" class="btn btn-primary" @onclick="@(()=>OnDeleteOrder(order.Id))">Cancel</button>


@code {
    [Parameter] public string OrderNumber { get; set; }

    private Order order;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        //get order from database by OrderNumber


        if (int.TryParse(OrderNumber, out int orderNumber))
        {
            order = OrderRepository.GetOrderByOrderNumber(orderNumber);
        }
        else
        {
            
        }
    }

    private async Task OnValidSubmit()
    {
        order.Status = OrderStatusEnum.Pending;
        await OrderRepository.UpdateOrderAsync(order);

        //Send email to admin
        string toEmail = "solyomnorbert15@gmail.com";
        string subject = "New Order Received";
        string message = $"A new order has been received. Order Number: {OrderNumber}, Customer Name: {order.CustomerName}, Customer Phone Number: {order.CustomerPhoneNumber}.";
        await EmailService.SendEmailAsync(toEmail, subject, message);

        NavigationManager.NavigateTo("/orderstatus");
    }

    private void OnDeleteOrder(int orderId)
    {
        DeleteOrderUseCase.Execute(orderId);
        NavigationManager.NavigateTo("/cart");
    }

}