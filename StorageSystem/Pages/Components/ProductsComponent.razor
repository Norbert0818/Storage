@page "/editingproducts"
@attribute [Authorize(Roles = "Admin, Manager, Employee")]


@inject NavigationManager NavigationManager
@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IDeleteProductUseCase DeleteProductUseCase

<h3>Products</h3>
<br />
@if (products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Actually Available</th>
                <th>Max Quantity</th>
                <th>Image</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@GetCategoryByIdUseCase.Execute(product.CategoryId)?.Name</td>
                    <td>@product.Name</td>
                    <td>@(Math.Round(product.Price.Value, 2))</td>
                    <td>@product.Quantity</td>
                    <td>@product.MaxQuantity</td>
                    <td>@product.ImageLink</td>
                    <AuthorizeView Roles="Manager, Admin">
                        <td>
                            <button type="button" class="btn btn-link" @onclick="@(()=>OnEditProduct(product))">Edit</button>

                            <button type="button" class="btn btn-link" @onclick="@(()=>OnDeleteProduct(product.Id))">Delete</button>
                        </td>
                    </AuthorizeView>
                    
                </tr>
            }
        </tbody>
    </table>
}
<br />
<AuthorizeView Roles="Manager, Admin">
    <button type="button" @onclick="OnClickAddProduct" class="btn btn-primary">Add Product</button>
</AuthorizeView>



@code {

    private IEnumerable<Product>? products;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        products = ViewProductsUseCase.Execute();
    }

    private void OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }

    private void OnEditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editproduct/{product.Id}");
    }

    private void OnDeleteProduct(int productId)
    {
        DeleteProductUseCase.Execute(productId);
        products = products.Where(p => p.Id != productId);
        StateHasChanged();
    }
}