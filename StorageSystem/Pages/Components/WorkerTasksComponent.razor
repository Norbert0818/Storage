@page "/tasks"
@using CoreBuisness.User;
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Plugins.DataStore.MySQL
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DataContext dbContext
@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager


@if (assignedTasks == null)
{
    <p>Loading tasks...</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Order Number</th>
                <th>Customer Name</th>
                <th>Phone Number</th>
                <th>Products</th>
                <th>Delivery Day</th>
                <th>Pickup Day</th>
                <th>Adress</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in assignedTasks)
            {
                @if (task.Status.ToString() == "Confirmed" || task.Status.ToString() =="Done")
                {
                    <tr>
                        <td>@task.Id</td>
                        <td>@task.CustomerName</td>
                        <td>@task.CustomerPhoneNumber</td>
                        <td>@task.OrderedProductNames</td>
                        <td>@task.DeliveryDay.ToShortDateString()</td>
                        <td>@task.PickupDay.ToShortDateString()</td>
                        <td>@task.Address</td>
                        @if(task.Status .ToString() == "Confirmed")
                        {
                            <td><button class="btn btn-success" @onclick="() => UpdateOrderStatus(task, OrderStatusEnum.Done)">Done</button></td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<Order> assignedTasks;

    protected override async Task OnInitializedAsync()
    {
        assignedTasks =  await dbContext.Orders.ToListAsync();
        await LoadAssignedTasks();
    }

    private async Task LoadAssignedTasks()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = await UserManager.GetUserAsync(user);
        assignedTasks = await dbContext.Orders
            .Where(o => o.WorkerId == currentUser.Id)
            .ToListAsync();
    }

    private async Task UpdateOrderStatus(Order order, OrderStatusEnum status)
    {
         if (status == OrderStatusEnum.Done )
        {
            Dictionary<Product, int> productQuantities = new Dictionary<Product, int>();

            ShoppingCart shoppingCart = dbContext.ShoppingCarts.Where(sp => sp.Id == order.ShoppingCartId).FirstOrDefault();
            List<ShoppingCartProduct> shoppingCartProduct = dbContext.ShoppingCartProducts.Where(scp => scp.ShoppingCartId == shoppingCart.Id).ToList();

            foreach (var product in shoppingCartProduct)
            {
                var matchingProduct = dbContext.Products.Where(p => p.Id == product.ProductId).FirstOrDefault();
                if (matchingProduct != null)
                {
                    productQuantities.Add(matchingProduct, product.Quantity);
                    matchingProduct.Quantity += product.Quantity;
                    dbContext.SaveChanges();
                }
            }
        }
        order.Status = status;
        dbContext.Orders.Update(order);
        await dbContext.SaveChangesAsync();
    }
    
}
