@page "/tasks"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Plugins.DataStore.MySQL
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DataContext dbContext
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager


@if (assignedTasks == null)
{
    <p>Loading tasks...</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Order Number</th>
                <th>Customer Name</th>
                <th>Phone Number</th>
                <th>Products</th>
                <th>Delivery Day</th>
                <th>Pickup Day</th>
                <th>Adress</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in assignedTasks)
            {
                @if (task.Status.ToString() == "Confirmed")
                {
                    <tr>
                        <td>@task.Id</td>
                        <td>@task.CustomerName</td>
                        <td>@task.CustomerPhoneNumber</td>
                        <td>@task.OrderedProductNames</td>
                        <td>@task.DeliveryDay.ToShortDateString()</td>
                        <td>@task.PickupDay.ToShortDateString()</td>
                        <td>@task.Address</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<Order> assignedTasks;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssignedTasks();
    }

    private async Task LoadAssignedTasks()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = await UserManager.GetUserAsync(user);
        assignedTasks = await dbContext.Orders
            .Where(o => o.WorkerId == currentUser.Id)
            .ToListAsync();
    }
}
