@page "/admin/orders"
@using Plugins.DataStore.MySQL
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using CoreBuisness.User
@inject UserManager<AppUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject DataContext AccountContext
@inject DataContext dbContext
@using CoreBuisness.User;



@if (allOrders == null)
{
    <p>Loading orders...</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Order Number</th>
                <th>Customer Name</th>
                <th>Products</th>
                <th>Delivery Day</th>
                <th>Pickup Day</th>
                <th>Days Of Renting</th>
                <th>Total Price</th>
                <th>Status</th>
                <th>Actions</th>
                <th>Add Task</th>
                <th>Inputs</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in allOrders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.CustomerName</td>
                    <td>@order.OrderedProductNames</td>
                    <td>@order.DeliveryDay.ToShortDateString()</td>
                    <td>@order.PickupDay.ToShortDateString()</td>
                    <td>@order.DaysOfRenting</td>
                    <td>@order.TotalPrice $</td>
                    <td>@order.Status</td>
                    <td>
                        @if (order.Status != OrderStatusEnum.Confirmed && order.Status != OrderStatusEnum.Declined && order.Status != OrderStatusEnum.Done)
                        {
                            <button class="btn btn-success" @onclick="() => UpdateOrderStatus(order, OrderStatusEnum.Confirmed)">Confirm</button>
                            <button class="btn btn-danger" @onclick="() => UpdateOrderStatus(order, OrderStatusEnum.Declined)">Decline</button>
                            
                        }
                        
                    </td>
                    @if (order.Status != OrderStatusEnum.Confirmed && order.Status != OrderStatusEnum.Declined && order.Status != OrderStatusEnum.Done)
                    {
                        <td>
                            <select @bind="selectedWorker" class="form-select">
                                <option value="">Select an employee</option>
                                @foreach (var employee in employees)
                                {
                                    <option value="@employee.Id">@employee.UserName</option>
                                }
                            </select>
                            <button class="btn btn-primary" @onclick="() => AssignOrderToEmployeeAsync(order, selectedWorker)">Assign</button>
                        </td>
                        <td>
                            <label for="workername">Worker Name</label>
                            <input type="text" name="workername" id="workername" @bind-value="order.WorkerName">
                            <label for="workerphonenumber">Worker Phonenumber</label>
                            <input tpye="text" name="workerphonenumber" id="workerphonenumber" @bind-value="order.WorkerPhoneNumber">
                        </td>

                    }
                    
                </tr>
                
            }
        </tbody>
    </table>
    
}

@code {
    private List<Order> allOrders;
    private string selectedWorker;

    private IList<AppUser> employees;

    protected override async Task OnInitializedAsync()
    {
        allOrders = await dbContext.Orders.ToListAsync();
        employees = (List<AppUser>)await GetUsersInEmployeeRole();
    }

    private async Task<IList<AppUser>> GetUsersInEmployeeRole()
    {
        var usersInRole = await UserManager.GetUsersInRoleAsync("Employee");
        return usersInRole;
    }
    
    //write public for testing
    public async Task UpdateOrderStatus(Order order, OrderStatusEnum status)
    {
        if(status == OrderStatusEnum.Confirmed)
        {
            Dictionary<Product, int> productQuantities = new Dictionary<Product, int>();

            ShoppingCart shoppingCart = dbContext.ShoppingCarts.Where(sp => sp.Id == order.ShoppingCartId).FirstOrDefault();
            List<ShoppingCartProduct> shoppingCartProduct = dbContext.ShoppingCartProducts.Where(scp => scp.ShoppingCartId == shoppingCart.Id).ToList();

            foreach (var product in shoppingCartProduct)
            {
                var matchingProduct = dbContext.Products.Where(p => p.Id == product.ProductId).FirstOrDefault();
                if (matchingProduct != null)
                {
                    productQuantities.Add(matchingProduct, product.Quantity);
                    //matchingProduct.Quantity -= product.Quantity;
                    dbContext.SaveChanges();
                }
            }

        }
        
        order.Status = status;
        dbContext.Orders.Update(order);
        await dbContext.SaveChangesAsync();
    }

    //write public for testing
    public async Task AssignOrderToEmployeeAsync(Order order, string userId)
    {
        if (!string.IsNullOrEmpty(userId))
        {
            order.WorkerId = userId;
            
            dbContext.Orders.Update(order);
            await dbContext.SaveChangesAsync();
        }
    }
    
}
