@page "/orderstatus"

@inject IOrderRepository OrderRepository
@inject NavigationManager NavigationManager
@using UseCases.DataStorePluginInterfaces
@using CoreBuisness

@if (OrderStatus == OrderStatusEnum.Pending)
{
    <div class="alert alert-warning" role="alert">
        Your order is pending and waiting for admin confirmation.
    </div>
    <div>
        <button type="button" class="btn btn-primary" @onclick="NavigateToItemsPage">Navigate to Orders</button>
    </div>
}
else if (OrderStatus == OrderStatusEnum.Confirmed)
{
    <div class="alert alert-success" role="alert">
        Your order has been confirmed by the admin.
    </div>
}
else if (OrderStatus == OrderStatusEnum.Declined)
{
    <div class="alert alert-success" role="alert">
        Your order has been declined by the admin.
    </div>
}


@code {
    [Parameter] public string OrderNumber { get; set; }
    [Parameter] public OrderStatusEnum OrderStatus { get; set; }

    public enum OrderStatusEnum
    {
        Pending,
        Confirmed,
        Declined
    }
    protected void NavigateToItemsPage()
    {
        NavigationManager.NavigateTo("/orders");
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (int.TryParse(OrderNumber, out int orderNumber))
        {
            Order order = OrderRepository.GetOrderByOrderNumber(orderNumber);
            
        }
        else
        {
            // Handle the case when OrderNumber cannot be parsed to an integer.
            // You may want to navigate back to the cart or show an error message.
        }
    }
}
